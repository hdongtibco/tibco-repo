<?xml version="1.0" encoding="UTF-8"?>

<project name="gatherer-main">

    <!--
    DO NOT EDIT THIS FILE.
    This is common infrastructure.  If you need changes, request them.
    If you change it yourself, you own it.  Don't ask anyone for help.
    Don't expect release to help; don't expect builder developers to help.
    Use the (many!) hooks to customize behavior, or request more, or budget
    the time and energy to handle all maintenance, support, and development
    on your own team, including time to train release engineers.
    The same applies to other files found in this directory.  Customize
    in the *-overrides.xml files.
    -->


	<!-- set the directory containing this script -->
    <dirname property="gatherer.dir.versioned" file="${ant.file.gatherer-main}"/>

    <!-- Do the standard tool-specific property environment configuration, and define utility targets. -->
    <property name="devtools.tool" value="gather" />
    <import file="${devtools.dir.base}/tools/common/1.0/devtools-common.xml"/>


    <!--
        The prerequisite state is way too linked to builder, not generic enough.
        For example, I have to set ${feature} for no good reason.
    -->
    <target name="-prerequisites" depends="-default-properties, -set-timestamp, -check-properties,
        -load-ant-contrib, -set-eclipse-targets, -set-workspace-properties, -check-builds-site, -define-update-sites"/>


    <target name="-default-properties">

        <property name="installation.name" value="default"/>
        <property name="installation.root" location="${devtools.dir.base}/installations/${installation.name}"/>
        <property name="installer.feature.script" value="macros.xml"/>
        
        <path id="installer.feature.path">
            <dirset dir="${installation.root}/components/eclipse/features">
                <include name="${installer.feature.id}_*"/>
            </dirset>
        </path>

        <property name="feature" value="irrelevant" />

    </target>


    <target name="clean-installation"
		description="Discard the installation, if present">

        <delete dir="${installation.root}"/>

    </target>


    <target name="-define-update-sites" depends="-set-and-spin" >

        <property name="site.type" value="release"/>
        <!-- TODO can we find a secure way to reuse the definition in Builder? -->
        <updatesites id="autobuild.workspace.update-sites.default">
            <updatesite url="${_spin_url}/milestones/${site.type}" />
            <updatesite url="${_spin_url}/milestones/thirdparty" />
            <updatesite url="${_spin_url}/devtools" />  <!-- note the addition -->
            <updatesite url="${autobuild.url.update-site.eclipse}" />
        </updatesites>

    </target>


    <target name="force-resolve" depends="-prerequisites"
		description="Set aside installedReleaseUnits.xml, to force re-resolve based only on requestedReleaseUnits.xml">
    
        <if>
            <available file="installedReleaseUnits.xml" type="file" />
            <then>
                <echo>

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
old installedReleaseUnits.xml set aside as installedReleaseUnits-${touch.time}.xml
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                </echo>
                <move file="installedReleaseUnits.xml" tofile="installedReleaseUnits-${touch.time}.xml"/>
            </then>
        </if>
    </target>


    <target name="resolve-closure" depends="-prerequisites"
                     description="Resolve dependencies of requestedReleaseUnits.xml, record in evaluatedDependencies.xml.">
                
        <evaluate.dependencies
        	algorithm="${_build_variant_text}"
        	refidname="autobuild.gather.dependencies.result"
        	localsitecache="${autobuild.workspace.local-cache}"
        	caching="${autobuild.workspace.cache-choice}">
			<fixedfeaturepath>
				<pathelement path="${autobuild.workspace.eclipse-target}" />
			</fixedfeaturepath>
            <featureSearchPath>
            	<pathelement path="requestedReleaseUnits.xml" />
            	<pathelement path="installedReleaseUnits.xml" />
            </featureSearchPath>
            
            <updatesites refid="autobuild.workspace.update-sites.default" />
            <updatesites refid="gatherer.update-sites.list" />
            <updatesites refid="autobuild.workspace.update-sites.local.id" />
        </evaluate.dependencies>
        
        <write.targets
        	refid="autobuild.gather.dependencies.result"
        	file="evaluatedDependencies.xml"
        	overwrite="true" format="xml"/>
                
    </target>


    <target name="install-closure" depends="-prerequisites, resolve-closure"
                     description="Resolve and install based on requestedReleaseUnits.xml.">

        <echo>
        
        installation.name: ${installation.name}
        
        installation.root: ${installation.root}
        
        </echo>
        
        <delete dir="${installation.root}/components/eclipse"/>        

        <install.targets
        	refid="autobuild.gather.dependencies.result"
        	dir="${installation.root}/components/eclipse"
        	localsitecache="${autobuild.workspace.local-cache}"
        	caching="${autobuild.workspace.cache-choice}">
        	
            <updatesites refid="autobuild.workspace.update-sites.default" />
            <updatesites refid="gatherer.update-sites.list" />
            <updatesites refid="autobuild.workspace.update-sites.local.id" />
        </install.targets>

    </target>


	<target name="clean-install" depends="force-resolve, install-closure, inventory-installation, run-install-script"
                     description="a legacy target, equal to: force-resolve, reinstall."/>

	<target name="reinstall" depends="install-closure, inventory-installation, run-install-script"
                     description="a legacy target, equal to: clean-installation, gather, record-gathered, run-install-script."/>

    <target name="inventory-installation">
    
        <taskdef name="featurexml.creator"
                 classname="com.tibco.devtools.workspace.installer.tasks.FeatureXmlCreatorTask"
                 classpath="${autobuild.dir.workspace.installer}" />

        <if>
            <available file="installedReleaseUnits.xml" type="file" />
            <then>
                <echo>

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
installedReleaseUnits.xml already present; used it to gather dependencies
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                </echo>
            </then>
            <else>
                <featurexml.creator
                    sitedirectory="${installation.root}/components/eclipse"
                    filename="installedReleaseUnits.xml"
                    featurelabel="release units installed"
                    featureid="installed.release.units.feature"
                    featureversion="${autobuild.version.builder}.${touch.time}" />
                <copy file="${installation.root}/components/eclipse/installedReleaseUnits.xml" todir="."/>
                <echo>

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
created installedReleaseUnits.xml; future reinstalls will use this until you remove it
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                </echo>
            </else>
        </if>
    </target>


	<target name="run-install-script" depends="-prerequisites"
                     description="Run the gathered install script, if present.">

        <pathconvert property="installer.script.dir" refid="installer.feature.path"/>
        <if>
            <available file="${installer.script.dir}/${installer.feature.script}" type="file" />
            <then>
                <echo message="invoking post-install script: ${installer.feature.script}"/>
                <ant dir="${installer.script.dir}" antfile="${installer.feature.script}" inheritAll="false">
                    <property name="installation.root" location="${installation.root}"/>
                </ant>
            </then>
            <else>
                <echo>

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
no installer script found!
installer.feature.id:     ${installer.feature.id}
installer.feature.script: ${installer.feature.script}
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                </echo>
            </else>
        </if>
    </target>
    
</project>
