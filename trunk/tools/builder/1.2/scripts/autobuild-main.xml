<?xml version="1.0" encoding="UTF-8"?>

<project name="builder-core">

    <!--
    DO NOT EDIT THIS FILE.
    This is common infrastructure.  If you need changes, request them.
    If you change it yourself, you own it.  Don't ask anyone for help.
    Don't expect release to help; don't expect builder developers to help.
    Use the (many!) hooks to customize behavior, or request more, or budget
    the time and energy to handle all maintenance, support, and development
    on your own team, including time to train release engineers.
    The same applies to other files found in this directory.  Customize
    in the *-overrides.xml files.  Expect sarcastic laughter if you ignore this.
    -->

    <!-- IMPORTS
         This section imports the various property overrides.  It
         happens *before* the defaults are set for good reason. -->

     <!-- default username for various purposes, most importantly developer build qualifiers -->
     <property name="autobuild.user.name" value="${user.name}"/>

     <!-- per-user-per-release-unit overrides.  not often used. -->
     <property name="autobuild.user-release-unit.overrides" location="${autobuild.dir.release-unit}/${autobuild.user.name}.xml" />
     <import file="${autobuild.user-release-unit.overrides}" optional="true" />

    <!-- per-release-unit overrides. useful for everybody. -->
    <property name="autobuild.release-unit.overrides" value="build-overrides.xml" />
    <import file="${autobuild.dir.release-unit}/${autobuild.release-unit.overrides}" optional="true" />

    <target name="-load-ant-contrib">
        <fail unless="_builder_is_identified">
The path to builder, ${autobuild.dir.builder}
does not exist or is not a directory;
the required ant-contrib library cannot be loaded.</fail>
        <taskdef resource="net/sf/antcontrib/antlib.xml">
            <classpath>
                <fileset dir="${autobuild.dir.builder}" includes="ant-contrib-1.0b3.jar"/>
            </classpath>
        </taskdef>
    </target>

    <import file="${autobuild.dir.scripts}/private/antrunner-macrodef.xml" />

    <import file="${autobuild.dir.scripts}/private/dependencies.xml" />

    <property name="archivist.home" location="${autobuild.dir.user}/tools/archivist" />
    <import file="${archivist.home}/build.xml" optional="true" />

    <!-- PROPERTY DEFAULTS
         This section sets defaults for various properties.  If you
         need to override them, do it elsewhere, not here. -->
    <target name="-set-timestamp" unless="touch.time">
        <tstamp>
            <!-- a common timezone and not local one! -->
            <format property="touch.time" pattern="yyyy-MM-dd-HHmm" timezone="GMT"/>
        </tstamp>
    </target>

    <target name="-set-build-properties" depends="-set-timestamp">
        <available property="_builder_is_identified" file="${autobuild.dir.builder}" type="dir" />
        <available property="_user_overrides_present" file="${autobuild.user.overrides}" type="file" />
        <available property="_builder_overrides_present" file="${autobuild.builder.overrides}" type="file" />

        <condition property="_builder_is_configured">
            <and>
                <isset property="_user_overrides_present" />
                <isset property="_builder_overrides_present" />
            </and>
        </condition>

        <condition property="_upgrade_1.1_config">
            <and>
                <isset property="_user_overrides_present" />
                <not>
                    <istrue value="${autobuild.configuration.post-1.1}" />
                </not>
            </and>
        </condition>

        <!-- directories of various sorts -->
        <property name="autobuild.dir.release-unit.configuration" location="${autobuild.dir.user}/configurations/${autobuild.repository}/${release-unit}" />
        <available property="_output_is_configured" file="${autobuild.dir.release-unit.configuration}" type="dir" />
        <property name="autobuild.workspace.feature-order-output" location="${autobuild.dir.release-unit}/${release-unit}-feature-list.xml" />

        <!-- synchronized with workspace installer -->
        <property name="autobuild.dir.eclipse.config" location="${autobuild.dir.release-unit.configuration}/configuration"/>
        <property name="autobuild.dir.eclipse.extensions" location="${autobuild.dir.release-unit.configuration}/extensionLoc/eclipse"/>

        <!-- used for a "workspace" in antrunner -->
        <property name="autobuild.dir.temp" location="/tmp/autobuild"/>

        <!-- obfuscation-related -->
        <property name="autobuild.obfuscator.lax" value="true" />
        <property name="autobuild.obfuscator.none" value="false" />
        <property name="autobuild.obfuscator.proguard" value="false" />

        <!-- compiler defaults, defined by *eclipse* -->
        <property name="javacVerbose" value="false" />
        <property name="javacDebugInfo" value="true" />
        <property name="javacFailOnError" value="true" />
        <property name="compilerArg" value="-nowarn" />
        <property name="javacSource" value="1.5" />
        <property name="javacTarget" value="1.5" />

        <!-- subversion tag location defaults -->
        <property name="autobuild.svn.tagname-base" value="${release-unit}" />
        <property name="autobuild.svn.tag-pattern" value="${release-unit}" />

        <!-- logging and messages -->
        <property name="autobuild.antrunner.arguments" value="" />
        <property name="autobuild.loglevel" value="verbose" />
        <property name="autobuild.log.console" value="-consoleLog" />
        <property name="autobuild.clean" value="-clean" />

        <!-- temporary, while doing generator refactoring -->
        <property name="autobuild.builder.generator.new" value="false" />

        <path id="autobuild.workspace.path.search.features">
            <pathelement path="." />
        </path>
        <path id="autobuild.workspace.path.search.projects" refid="autobuild.workspace.path.search.features" />
    </target>

    <!-- PUBLIC TARGETS (called from build.xml boilerplate)
         build: build a release unit
         gather-dependencies: run workspace installer for this release unit
         remove-configuration: remove the stuff created by workspace installer
         properties: spew properties as they will be used at build time
         clean: clean up leftovers, as necessary -->

    <target name="build" depends="-check-properties,  -check-configuration,
                                  -display-parameters,
                                  gather-dependencies, -load-ant-contrib"
            description="Build one release unit.">
        <!-- store all properties, so we can pick them up inside antRunner -->
        <tempfile property="_antrunner.temp.file" />
        <echoproperties destfile="${_antrunner.temp.file}"/>

        <autobuild.antrunner buildFile="${autobuild.dir.scripts}/build-release-unit.xml"
                             propertyFile="${_antrunner.temp.file}" />
        <!-- The devtools.antrunner macrodef wraps a call to the antRunner Eclipse application.  We do this because
             we are leveraging the Eclipse extension mechanism to make our custom ant tasks
             visible.  Furthermore, these ant tasks call into Eclipse PDE code (FeatureBuildScriptGenerator),
             which must be on the classpath.  We tried NOT using antrunner, just taskdefs, but it turns out
             that Eclipse's internal BuildTimeSiteFactory (a core requirement) only works in an OSGi environment. -->

        <delete file="${_antrunner.temp.file}"/>
    </target>

    <target name="properties" depends="-set-build-properties, -set-bootclasspath, -load-ant-contrib"
            description="Display properties (used for debugging builder).">
        <trycatch property="_properties_runner_failure">
            <try>
                <tempfile property="_properties.antrunner.temp.file" />
                <echoproperties destfile="${_properties.antrunner.temp.file}" />
                <autobuild.antrunner buildFile="${autobuild.dir.scripts}/build-release-unit.xml"
                                     propertyFile="${_properties.antrunner.temp.file}" antArguments="properties" />
                <delete file="${_properties.antrunner.temp.file}" />
            </try>
            <catch>
                <echo>Properties invocation failed: ${_properties_runner_failure}</echo>
                <echo>Dumping partial property sets:</echo>
                <echoproperties prefix="user." />
                <echoproperties prefix="autobuild." />
                <echoproperties>
                    <propertyset>
                        <propertyref name="release-unit" />
                        <propertyref name="feature" />
                        <propertyref name="basedir" />
                        <propertyref name="official-release-build" />
                    </propertyset>
                </echoproperties>
            </catch>
        </trycatch>
    </target>

    <target name="clean"
            depends="-check-properties, -display-parameters, -load-ant-contrib"
            description="Clean up build artifacts.">
        <trycatch property="_clean_errors">
            <try>
                <ant antfile="build.xml" target="clean"
                     dir="${autobuild.dir.release-unit}/features/${feature}" />
                <ant antfile="assemble.xml" target="clean" dir="${autobuild.dir.release-unit}/" />
            </try>
            <catch>
                <echo>Caught a problem running the "clean" target:</echo>
                <echo>${_clean_errors}</echo>
                <echo>Ignoring it.</echo>
            </catch>
            <finally>
                <delete failonerror="false">
                    <!-- none of these should exist, except *Versions.properties and the build scripts, after a successful build. -->
                     <fileset dir="${autobuild.dir.release-unit}" includes="*Versions.properties" />
                     <fileset dir="${autobuild.dir.release-unit}" includes="null*" />
                     <fileset dir="${autobuild.dir.release-unit}" includes="*.log" />
                     <fileset file="${autobuild.dir.release-unit}/features/${feature}/build.xml" />
                     <fileset file="${autobuild.dir.release-unit}/assemble.xml" />
                </delete>
            </finally>
        </trycatch>
    </target>

    <target name="veryclean" depends="clean, remove-configuration"
            description="Use with caution!  Tries to clean even more than clean.">
        <delete failonerror="false" includeemptydirs="true">
            <fileset file="${autobuild.workspace.feature-order-output}" />
            <fileset dir="${autobuild.dir.release-unit}" includes="*-tests.xml" />
            <fileset dir="${javadoc.destination}" includes="**/*"/>
        </delete>
    </target>

    <target name="Usage"
            description="Display a usage message.">
        <echo>Major targets include:</echo>
        <echo>[default] build: build the release unit.</echo>
        <echo>clean: clean the release unit build.</echo>
        <echo>gather-dependencies: collect the features/plugins required to build.</echo>
        <echo>remove-configuration: remove the collected dependencies.</echo>
        <echo>properties: mostly of use in debugging.</echo>
        <echo>For more information, see:</echo>
        <echo>     http://wiki.tibco.com/wiki/FrameworksWiki/Componentization/Builder</echo>
    </target>

    <target name="tool-versions"
            description="Display builder version information.">
            <echo>Builder version: ${autobuild.version.builder}</echo>
            <echo>Workspace Installer version: ${autobuild.version.workspace}</echo>
            <echo>Builder delivery style: ${autobuild.delivery.style}</echo>
    </target>


    <!-- PRIVATE TARGETS (called from other targets)
         Note that all of these targets are deliberately named in such
         a manner that they cannot be invoked from the command line. -->

    <!-- this target basically depends upon a whole bunch of sanity checks,
         to try to insure that the errors we get out are comprehensible. -->
    <target name="-check-properties"
            depends="-set-build-properties, -feature-set, -release-unit-set,
                     -upgrade-configuration, -create-overrides, -set-bootclasspath, -check-eclipse" />

    <target name="-upgrade-configuration" if="_upgrade_1.1_config">
        <move file="${autobuild.user.overrides}" tofile="${user.home}/tibco-build/user-overrides-1.1.xml" />
        <echo>Discovered 1.1 configuration rather than 1.2.  Moving it aside.</echo>
        <antcall target="-create-user-overrides" />
        <antcall target="-create-builder-overrides" />
        <antcall target="-configuration-failure" />
    </target>

    <target name="-create-overrides" depends="-check-user-overrides, -check-builder-overrides"
            unless="_builder_is_configured">
        <antcall target="-configuration-failure" />
    </target>

    <target name="-configuration-failure">
        <echo>Oops!  It looks as though this is the first time that you've used builder.</echo>
        <echo>You will need to do some setup before you are able to build successfully.</echo>
        <echo>I have created a user configuration file for you.</echo>
        <echo>Please take a look at the file ${autobuild.user.overrides}</echo>
        <echo>If you are using builder 1.1 as well as the current version,</echo>
        <echo>please also examine ${autobuild.dir.users}/tools/builder-1.1-compatibility.xml.</echo>
        <fail>Please modify ${autobuild.user.overrides} and try again.</fail>
    </target>

    <target name="-check-user-overrides" unless="_user_overrides_present">
        <antcall target="-create-user-overrides" />
    </target>

    <target name="-create-user-overrides" >
        <mkdir dir="${user.home}/tibco-build" />
        <copy file="${autobuild.dir.scripts}/boilerplate/user-overrides.xml" todir="${user.home}/tibco-build">
            <filterset>
                <filter token="USERNAME" value="${autobuild.user.name}" />
            </filterset>
        </copy>
    </target>

    <target name="-check-builder-overrides" unless="_builder_overrides_present">
        <antcall target="-create-builder-overrides" />
    </target>

    <target name="-create-builder-overrides">
        <mkdir dir="${autobuild.dir.builder.root}" />
        <copy file="${autobuild.dir.scripts}/boilerplate/builder-overrides.xml" todir="${autobuild.dir.builder.root}">
            <!-- filterset? -->
        </copy>
        <copy file="${autobuild.dir.scripts}/boilerplate/builder-1.1-compatibility.xml"
              todir="${autobuild.dir.users}/tools">
            <!-- filterset? -->
        </copy>
    </target>

    <!-- this target provides a summary display of important base properties,
         which is displayed for every build. -->
    <target name="-display-parameters">
        <echo>Release Unit: ${release-unit}</echo>
        <echo>Feature: ${feature}</echo>
        <echo>Eclipse/Builder: ${autobuild.dir.eclipse.install}</echo>
        <echo>Extensions: ${autobuild.dir.eclipse.extensions}</echo>
        <echo>Java: ${autobuild.dir.java-classes}</echo>
        <echo>Scripts: ${autobuild.dir.scripts}</echo>
        <echo>User Overrides: ${autobuild.user.overrides}</echo>
        <echo>Output base: ${autobuild.dir.candidates}</echo>
        <echo>Tags look like: [repository root url]/tags/${autobuild.svn.tagname-base}-x.y.z.nnn/${autobuild.svn.tag-pattern}</echo>
    </target>

    <target name="-feature-set" unless="feature">
        <property name="o1" value="&#10; - define it in build.properties"/>
        <property name="o2" value="&#10; - call ant -Dfeature=FEATURE-NAME"/>
        <property name="msg" value="You must set the property 'feature'.&#10;Possiblities:${o1}${o2}"/>
        <echo message="${msg}"/>
        <antcall target="Usage"/>
        <fail message="${msg}"/>
    </target>

    <target name="-release-unit-set" if="official-release-build" unless="release-unit">
        <property name="o1" value="&#10; - define it in build.properties"/>
        <property name="o2" value="&#10; - call ant -Drelease-unit=RELEASE-UNIT-NAME"/>
        <property name="msg" value="When the property 'official-release-build' is set, you must set the property 'release-unit' as well.&#10;Possibilities:${o1}${o2}" />
        <antcall target="Usage" />
        <fail message="${msg}" />
    </target>

    <target name="-get-platform">
        <condition property="_is_OS_X">
            <os family="unix" name="Mac OS X" />
        </condition>
        <!-- default -->
        <!--condition property="_is_unixish">
            <and>
                <os family="unix" />
                <not>
                    <os name="Mac OS X" />
                </not>
            </and>
        </condition -->
        <condition property="_is_windows">
            <os family="windows" />
        </condition>
    </target>

    <target name="-set-osx-classpath" if="_is_OS_X">
        <!-- differs from other unixen by s/rt.jar/classes.jar/ -->
        <condition property="_java_is_sane">
            <and>
                <available file="${autobuild.dir.java-classes}" type="dir" />
                <available file="${autobuild.dir.java-classes}/classes.jar" type="file" />
                <available file="${autobuild.dir.java-classes}/jsse.jar" type="file" />
                <available file="${autobuild.dir.java-classes}/jce.jar" type="file" />
            </and>
        </condition>
        <property name="bootclasspath" value="${autobuild.dir.java-classes}/classes.jar:${autobuild.dir.java-classes}/jsse.jar:${autobuild.dir.java-classes}/jce.jar" />
    </target>

    <target name="-set-windows-classpath" if="_is_windows">
        <!-- windows pathsep -->
        <property name="bootclasspath" value="${autobuild.dir.java-classes}/rt.jar;${autobuild.dir.java-classes}/jsse.jar;${autobuild.dir.java-classes}/jce.jar" />
    </target>

    <target name="-set-bootclasspath" depends="-get-platform, -set-osx-classpath, -set-windows-classpath">
        <condition property="_java_is_sane">
            <and>
                <available file="${autobuild.dir.java-classes}" type="dir" />
                <available file="${autobuild.dir.java-classes}/rt.jar" type="file" />
                <available file="${autobuild.dir.java-classes}/jsse.jar" type="file" />
                <available file="${autobuild.dir.java-classes}/jce.jar" type="file" />
            </and>
        </condition>
        <!-- except for os x, all unixen use the same bootclasspath value, once you've abstracted out the directory location -->
        <property name="bootclasspath" value="${autobuild.dir.java-classes}/rt.jar:${autobuild.dir.java-classes}/jsse.jar:${autobuild.dir.java-classes}/jce.jar"/>
        <fail unless="_java_is_sane">
The setting for autobuild.dir.java-classes in ${autobuild.user.overrides} is:
${autobuild.dir.java-classes}
However, either this directory does not exist, or it does not contain the
jars required to invoke javac.  Please correct your configuration.</fail>
    </target>

    <target name="-check-eclipse">
        <condition property="_eclipse_is_sane">
            <and>
                <available file="${autobuild.dir.eclipse.install}" type="dir" />
                <available file="${autobuild.dir.eclipse.install}/features" type="dir" />
                <available file="${autobuild.dir.eclipse.install}/plugins" type="dir" />
            </and>
        </condition>
        <fail unless="_eclipse_is_sane">
The setting for autobuild.dir.eclipse in ${autobuild.user.overrides} is:
${autobuild.dir.eclipse}
However, either this directory does not exist, or it does not contain the
signature directories (features and plugins) that indicate a genuine eclipse
installation.  Please correct your configuration and try again.</fail>
    </target>

</project>
