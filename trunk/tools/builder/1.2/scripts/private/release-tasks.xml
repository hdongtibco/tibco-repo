<project name="Acquire Version and Build Information for Release" default="usage">

    <!-- called multiple times, once per feature, from buildrelunit, with various props -->
    <target name="-release-update-feature" if="official-release-build"
            depends="-release-set-previous-feature-buildno, -release-reset-previous-feature-buildno">
        <echo>Updating feature: ${this-feature}</echo>
        <if>
            <not>
                <isset property="_build.last-built.tag" />
            </not>
            <then>
                <antcall target="-release-reset-feature-buildno" />
            </then>
            <else>
                <tempfile property="currentVersion.property.temp.file" />
                <xslt in="${autobuild.dir.release-unit}/features/${this-feature}/feature.xml"
                      out="${currentVersion.property.temp.file}"
                      style="${autobuild.dir.scripts}/private/featureVersion.xsl">
                    <param name="propname" expression="current-version" />
                </xslt>
                <property file="${currentVersion.property.temp.file}" />
                <delete file="${currentVersion.property.temp.file}" />

                <tempfile property="lastVersion.temp.file" />
                <trycatch property="_svn_feature_manifest_load_failure">
                    <try>
                        <tempfile property="lastVersion.property.temp.file" />
                        <exec executable="svn" logerror="on" failonerror="on" outputproperty="remote.content">
                            <arg line="cat ${autobuild.svn.tagsURL}/${_build.last-built.tag}/${autobuild.svn.tag-pattern}/features/${this-feature}/feature.xml" />
                        </exec>
                        <echo file="${lastVersion.temp.file}">${remote.content}</echo>
                        <xslt in="${lastVersion.temp.file}" out="${lastVersion.property.temp.file}"
                              style="${autobuild.dir.scripts}/private/featureVersion.xsl">
                            <param name="propname" expression="last-built-version" />
                        </xslt>
                    </try>
                    <catch>
                        <echo>Couldn't load a plugin manifest:</echo>
                        <echo>${_svn_plugin_manifest_load_failure}</echo>
                        <echo>Ignoring it (it's probably a new plugin)</echo>
                        <echo file="${lastVersion.property.temp.file}">last-built-version=0.0.0
</echo>
                        <property name="remote.content" value="Bundle-Version: 0.0.0" />
                    </catch>
                </trycatch>
                <property file="${lastVersion.property.temp.file}" />
                <delete file="${lastVersion.temp.file}" />
                <delete file="${lastVersion.property.temp.file}" />

                <condition property="version-match">
                    <equals arg1="${last-built-version}" arg2="${current-version}" />
                </condition>

                <if>
                    <isset property="version-match" />
                    <then>
                        <antcall target="-release-increment-feature-buildno" />
                    </then>
                    <else>
                        <antcall target="-release-reset-feature-buildno" />
                    </else>
                </if>
            </else>
        </if>
    </target>

    <target name="-release-set-previous-feature-buildno" if="feature.tag.${this-feature}">
        <propertycopy property="feature-buildno" from="feature.tag.${this-feature}" />
        <echo>Previous build number: ${feature-buildno}</echo>
    </target>

    <target name="-release-reset-previous-feature-buildno" unless="feature.tag.${this-feature}">
        <property name="feature-buildno" value="000" />
        <echo>Build number reset to ${feature-buildno}</echo>
    </target>

    <!-- part of update feature -->
    <target name="-release-increment-feature-buildno" if="version-match">
        <echo>Incrementing build number for feature ${this-feature}</echo>
        <math result="feature-buildno" operand1="${feature-buildno}" operation="add" operand2="1" />
        <propertyfile file="${autobuild.svn.featureVersionProperties.working}">
            <entry key="${this-feature}" type="int" pattern="000" default="${feature-buildno}" />
        </propertyfile>
    </target>

    <!-- part of update feature -->
    <target name="-release-reset-feature-buildno" unless="version-match">
        <echo>Resetting feature ${this-feature} build number to 001</echo>
        <propertyfile file="${autobuild.svn.featureVersionProperties.working}">
            <entry key="${this-feature}" default="001" />
        </propertyfile>
    </target>

    <!-- called multiple times from buildrelunit, once per plugin -->
    <target name="-release-update-plugin" if="official-release-build"
            depends="-release-set-previous-plugin-buildno, -release-reset-previous-plugin-buildno">
        <echo>Updating plugin: ${plugin}</echo>
        <if>
            <not>
                <isset property="_build.last-built.tag" />
            </not>
            <then>
                <antcall target="-release-reset-plugin-buildno" />
            </then>
            <else>
                <loadproperties srcFile="${autobuild.dir.release-unit}/plugins/${plugin}/META-INF/MANIFEST.MF">
                    <filterchain>
                        <linecontains>
                            <contains value="Bundle-Version" />
                        </linecontains>
                        <prefixlines prefix="current-" />
                    </filterchain>
                </loadproperties>

                <tempfile property="lastVersion.temp.file" />
                <trycatch property="_svn_plugin_manifest_load_failure">
                    <try>
                        <exec executable="svn" logerror="on" failonerror="on" outputproperty="remote.content">
                            <arg line="cat ${autobuild.svn.tagsURL}/${_build.last-built.tag}/${autobuild.svn.tag-pattern}/plugins/${plugin}/META-INF/MANIFEST.MF" />
                        </exec>
                    </try>
                    <catch>
                        <echo>Couldn't load a plugin manifest:</echo>
                        <echo>${_svn_plugin_manifest_load_failure}</echo>
                        <echo>Ignoring it (it's probably a new plugin)</echo>
                        <property name="remote.content" value="Bundle-Version: 0.0.0" />
                    </catch>
                </trycatch>
                <echo file="${lastVersion.temp.file}">${remote.content}</echo>
                <loadproperties srcFile="${lastVersion.temp.file}">
                    <filterchain>
                        <linecontains>
                            <contains value="Bundle-Version" />
                        </linecontains>
                        <prefixlines prefix="last-" />
                    </filterchain>
                </loadproperties>
                <delete file="${lastVersion.temp.file}" />

                <echo level="verbose">last-Bundle-Version: ${last-Bundle-Version}</echo>
                <echo level="verbose">current-Bundle-Version: ${current-Bundle-Version}</echo>

                <condition property="version-match">
                    <equals arg1="${last-Bundle-Version}" arg2="${current-Bundle-Version}" />
                </condition>

                <if>
                    <isset property="version-match" />
                    <then>
                        <antcall target="-release-increment-or-continue-plugin-buildno" />
                    </then>
                    <else>
                        <antcall target="-release-reset-plugin-buildno" />
                    </else>
                </if>
            </else>
        </if>
    </target>

    <target name="-release-set-previous-plugin-buildno" if="plugin.tag.${plugin}">
        <propertycopy property="plugin-buildno" from="plugin.tag.${plugin}" />
        <echo>Previous build number: ${plugin-buildno}</echo>
    </target>

    <target name="-release-reset-previous-plugin-buildno" unless="plugin.tag.${plugin}">
        <property name="plugin-buildno" value="000" />
        <echo>Build number reset to ${plugin-buildno}</echo>
    </target>

    <!-- part of update plugin -->
    <target name="-release-compare-svn-revisions" if="version-match">
        <echo>Comparing revisions for plugin ${plugin} in workspace and in ${_build.last-built.tag}</echo>
        <tempfile property="tag.revision.temp.file" />
        <tempfile property="wc.revision.temp.file" />
        <tempfile property="tag.revision.property.temp.file" />
        <tempfile property="wc.revision.property.temp.file" />
        <!-- isn't that ridiculous?  *sigh* -->

        <exec executable="svn" logerror="on" failonerror="on" outputproperty="svn.revision.wc">
            <arg line="info --xml ${autobuild.dir.release-unit}/plugins/${plugin}" />
        </exec>
        <echo file="${wc.revision.temp.file}">${svn.revision.wc}</echo>
        <xslt in="${wc.revision.temp.file}" out="${wc.revision.property.temp.file}"
              style="${autobuild.dir.scripts}/private/lastRevised.xsl">
            <param name="propname" expression="current-revision" />
        </xslt>
        <property file="${wc.revision.property.temp.file}" />
        <delete file="${wc.revision.temp.file}" />
        <delete file="${wc.revision.property.temp.file}" />

        <trycatch property="_svn_plugin_revision_failure">
            <try>
                <exec executable="svn" logerror="on" failonerror="on" outputproperty="svn.revision.tag">
                    <arg line="info --xml ${autobuild.svn.tagsURL}/${_build.last-built.tag}/${autobuild.svn.tag-pattern}/plugins/${plugin}" />
                </exec>
                <echo file="${tag.revision.temp.file}">${svn.revision.tag}</echo>
                <xslt in="${tag.revision.temp.file}" out="${tag.revision.property.temp.file}"
                      style="${autobuild.dir.scripts}/private/lastRevised.xsl">
                    <param name="propname" expression="tagged-revision" />
                </xslt>
                <property file="${tag.revision.property.temp.file}" />
                <delete file="${tag.revision.temp.file}" />
                <delete file="${tag.revision.property.temp.file}" />
            </try>
            <catch>
                <echo>Hmm, caught a problem:</echo>
                <echo>${_svn_plugin_revision_failure}</echo>
                <echo>This is probably just a new plugin in the working copy.</echo>
                <echo>Ignoring the error.</echo>
                <property name="tagged-revision" value="unmatchable" />
            </catch>
        </trycatch>

        <echo level="verbose">tagged-revision: ${tagged-revision}</echo>
        <echo level="verbose">current-revision: ${current-revision}</echo>

        <!-- all that setup, just for this: -->
        <condition property="unchanged">
            <equals arg1="${tagged-revision}" arg2="${current-revision}" />
        </condition>
    </target>

    <target name="-release-increment-or-continue-plugin-buildno" depends="-release-compare-svn-revisions">
        <if>
            <isset property="unchanged" />
            <then>
                <antcall target="-release-continue-plugin-buildno" />
            </then>
            <else>
                <antcall target="-release-increment-plugin-buildno" />
            </else>
        </if>
    </target>

    <!-- part of update plugin -->
    <target name="-release-increment-plugin-buildno" unless="unchanged">
        <echo>Incrementing build number for plugin ${plugin}</echo>
        <math result="plugin-buildno" operand1="${plugin-buildno}" operation="add" operand2="1" />
        <propertyfile file="${autobuild.svn.pluginVersionProperties.working}">
            <entry key="${plugin}" type="int" pattern="000" default="${plugin-buildno}" />
        </propertyfile>
    </target>

    <!-- part of update plugin -->
    <target name="-release-continue-plugin-buildno" if="unchanged">
        <if>
            <equals arg1="${plugin-buildno}" arg2="000" />
            <then>
                <echo>Setting initial build number 001 for plugin ${plugin}</echo>
                <propertyfile file="${autobuild.svn.pluginVersionProperties.working}">
                    <entry key="${plugin}" default="001" />
                </propertyfile>
            </then>
            <else> <!-- usual case -->
                <echo>Retaining build number ${plugin-buildno} for plugin ${plugin}</echo>
                <propertyfile file="${autobuild.svn.pluginVersionProperties.working}">
                    <entry key="${plugin}" default="${plugin-buildno}" />
                </propertyfile>
            </else>
        </if>
    </target>

    <!-- part of update plugin -->
    <target name="-release-reset-plugin-buildno" unless="version-match">
        <echo>Setting plugin ${plugin} build number to 001</echo>
        <propertyfile file="${autobuild.svn.pluginVersionProperties.working}">
            <entry key="${plugin}" default="001" />
        </propertyfile>
    </target>

</project>
