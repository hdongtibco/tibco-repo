<?xml version="1.0"?>
<project name="Automated tagging for release builds">

    <import file="${autobuild.dir.release-unit}/build-artifacts/tag.xml" optional="true" />

    <target name="tag"
            description="tag this release unit"
            if="_version_available"
            depends="-set-build-properties, -make-artifacts-dir, -check-version, -load-ant-contrib, -set-tag-properties">
        <!-- make the new tag.  this part is easy. -->
        <echo>${tag.create.comment}</echo>
        <exec executable="svn"
              logerror="on"
              failonerror="on">
            <arg line='mkdir -m  "${tag.create.comment}" ${autobuild.svn.tag.target.url}' />
        </exec>
        <!-- using the property that we generated via regexes above, do a repo-to-repo copy. -->
        <echo>${tag.copy.comment}</echo>
        <exec executable="svn"
              logerror="on"
              failonerror="on">
            <arg line='cp -m "${tag.copy.comment}" -r ${autobuild.svn.tag.target.revision} ${_svn_copy_base_url} ${autobuild.svn.tag.target.url}' />
        </exec>
        <!-- release has tags checked out, more or less permanently, and in a predictable place.
             so, here we let them specify the working-copy.base, and append $repo/tags to that.
             that means we can do an update.  if the property is unset, we have to check out
             the newly-created tag. -->
        <!-- we're also setting a property that identifies the location of the release unit
             within the new tag working copy. -->
        <if>
            <isset property="autobuild.release.tags.working-copy.base" />
            <then>
                <echo>updating existing tags location ${autobuild.release.tags.working-copy.base}/${autobuild.repository}${autobuild.svn.tags-prefix}/tags${autobuild.svn.tags-suffix}/${autobuild.svn.tag.target}</echo>
                <exec executable="svn"
                      logerror="on"
                      failonerror="on">
                    <arg line="up ${autobuild.release.tags.working-copy.base}/${autobuild.repository}${autobuild.svn.tags-prefix}/tags${autobuild.svn.tags-suffix}/${autobuild.svn.tag.target}" />
                </exec>
                <property name="_target_working_copy"
                          location="${autobuild.release.tags.working-copy.base}/${autobuild.repository}${autobuild.svn.tags-prefix}/tags${autobuild.svn.tags-suffix}/${autobuild.svn.tag.target}/${autobuild.svn.tag-pattern}" />
            </then>
            <else>
                <echo>The property autobuild.release.tags.working-copy.base is not set.</echo>
                <echo>checking out tags in a new working copy: ../${autobuild.svn.tag.target}</echo>
                <exec executable="svn"
                      logerror="on"
                      failonerror="on">
                    <arg line="co ${autobuild.svn.tag.target.url} ../${autobuild.svn.tag.target}" />
                </exec>
                <property name="_target_working_copy"
                          location="../${autobuild.svn.tag.target}/${autobuild.svn.tag-pattern}" />
            </else>
        </if>
        <echo>Target Working Copy: ${_target_working_copy}</echo>
        <!-- now copy the extra bits (build numbers and contents of build-artifacts dir)
             to the new working copy of the new tag. -->
        <echo>copying build-artifacts and *Versions.properties to working copy ${_target_working_copy}</echo>
        <copy todir="${_target_working_copy}">
            <fileset dir="${autobuild.dir.release-unit}">
                <include name="build-artifacts/*" />
                <include name="*Versions.properties" />
            </fileset>
        </copy>
        <!-- add the copied bits to version control. -->
        <echo>adding build-artifacts and *Versions.properties to working copy ${_target_working_copy}</echo>
        <exec executable="svn"
              logerror="on"
              failonerror="on">
            <arg line="add ${_target_working_copy}/featureVersions.properties ${_target_working_copy}/pluginVersions.properties ${_target_working_copy}/build-artifacts" />
        </exec>
        <!-- and commit.  finished. -->
        <echo>${tag.commit.comment}</echo>
        <exec executable="svn"
              logerror="on"
              failonerror="on">
            <arg line='commit -m "${tag.commit.comment}" ${_target_working_copy}' />
        </exec>
    </target>

    <target name="-set-tag-properties" if="official-release-build">
        <!-- this is handling the mess that happens when people stuff significant chunks of
             a repository into a tag, rather than just one release unit.  we're basically
             looking at the URL of the working copy, removing all but the first particle
             of tag pattern from the end of that, and using that as the base to copy into
             the new tag. -->
        <propertyregex property="_trimmed_pattern"
                       input="${autobuild.svn.tag-pattern}"
                       regexp="([^/]+).*"
                       select="\1" />
        <propertyregex property="_svn_copy_base_url"
                       input="${autobuild.svn.tag.target.source.url}"
                       regexp="(.+${_trimmed_pattern}).*"
                        select="\1" />
        <!-- if the commit messages have been overridden in a file, set them. -->
        <property file="tagComments.properties" />
        <!-- if not, set the defaults -->
        <property name="tag.create.comment" value="creating ${autobuild.svn.tag.target} for ${autobuild.svn.tag.target.source.url}" />
        <property name="tag.copy.comment" value="copying ${_svn_copy_base_url}@${autobuild.svn.tag.target.revision} to ${autobuild.svn.tag.target.url}" />
        <property name="tag.commit.comment" value="committing build-artifacts and *Versions.properties to tag ${autobuild.svn.tag.target}" />
    </target>

    <target name="-check-version"
            if="official-release-build">
        <!-- check for the existence of a file containing the build number,
             if and only if this is an official release build -->
        <available property="_version_available"
                   file="${autobuild.dir.build-artifacts}/tag.xml" />
    </target>
</project>
